from dataclasses import dataclass,field
from json import loads
from os import listdir, remove
from os.path import getmtime

@dataclass(frozen=True)
class MalwarebytesLogManager():
    log_path : str = field(init=True, default="C:/ProgramData/Malwarebytes/MBAMService/MwacDetections")
    only_inbound: bool = field(init=True, default=False)
    log_items : dict = field(init=False)

    def __post_init__(self):
        self.load_logs()

    def load_logs(self):
        object.__setattr__(self,'log_items', dict())
        log_files = [ f'{self.log_path}/{file}' for file in listdir(self.log_path)]
        log_files.sort(key=lambda path_file: getmtime(path_file))
        for file_name in log_files:
            file = open(file_name,'r')
            file_content: list = file.readlines()[1:]
            file.close()
            file_content: str = "".join(file_content)
            log_item = loads(file_content)
            if self.only_inbound:
                if log_item['threats'][0]['mainTrace']['websiteData']['isInbound']:
                    self.log_items[file_name] = log_item
            else:
                self.log_items[file_name] = log_item

    def get_inbound_ip_detections(self) -> list[str]:
        inbound_ip_detections : list = []
        for log_item in self.log_items.values():
            try:
                if log_item['threats'][0]['mainTrace']['websiteData']['isInbound']:
                    ip = log_item['threats'][0]['mainTrace']['websiteData']['ip']
                    if not ip in inbound_ip_detections:inbound_ip_detections.append(ip)
            except Exception as e:
                print(e)
        return inbound_ip_detections

    def delete_outbound_logs(self):
        for file_name, log_item in self.log_items.items():
            try:
                if not log_item['threats'][0]['mainTrace']['websiteData']['isInbound']:
                    remove(file_name)
            except Exception as e:
                print(e)