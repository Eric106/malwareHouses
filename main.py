from os.path import exists
from ipaddress import IPv4Network, IPv4Address
from pandas import DataFrame, concat, read_csv
from vt.error import APIError as VT_error
from modules.virus_total_util import VirusTotalAnalyzer
from modules.mb_util import MalwarebytesLogManager


def ip_in_history_subnets(ip: str, subnets: list[str]) -> bool:
    in_history_subnets: bool = False
    for subnet in subnets:
        if IPv4Address(ip) in IPv4Network(subnet):
            in_history_subnets = True
            break
    return in_history_subnets

def main():
    VTA = VirusTotalAnalyzer(config_json='config.json')
    MBM = MalwarebytesLogManager(only_inbound=True)
    MBM.delete_outbound_logs()

    detections_file = "detections.csv"
    ip_info : DataFrame
    if exists(detections_file):
        ip_info = read_csv(detections_file, sep='\t')
    else:
        ip_info = DataFrame({"country":list(),"ip":list(),"subnet":list(),"ip range":list()})

    for ip in MBM.get_inbound_ip_detections():
        if not ip in ip_info['ip'].tolist():
            if not ip_in_history_subnets(ip, ip_info['subnet'].tolist()):
                try:
                    print(f'scanning new ip:{ip}')
                    scan = VTA.scan_ip(ip)
                    if VTA.is_malicious_ip(scan):
                        subnet = VTA.get_ip_subnet(scan)
                        country = VTA.get_ip_country(scan)
                        ip_range = IPv4Network(subnet)
                        info = {"country":[country],"ip":[ip],"subnet":[subnet],"ip range":[f"{ip_range[0]} - {ip_range[-1]}"]}
                        ip_info = concat([ip_info, DataFrame(info)], ignore_index=True)
                except VT_error as e:
                    print(f'{ip} : {e}')
                    
    ip_info.to_csv(detections_file, index=False, sep='\t')
    print(ip_info)
    print('\n', ip_info.groupby(['country']).size())

if __name__ == '__main__':
    main()